"""
Django settings for promptsmith project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from pathlib import Path

from dotenv import load_dotenv

import json

# load .env file
load_dotenv()

# import json as a dict the configuration file shared between backend and frontend

configuration_path = os.path.join(os.path.dirname(__file__),
                                  '../clients-side/frontend/prompt-smith-frontend/config/configuration.json')
with open(configuration_path) as f:
    SHARED_CONFIGURATION = json.load(f)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'prompt_smith')

TRAILING_SLASH = False

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', False) == '1'
RUNNING_DEVELOPMENT_SERVER = (len(sys.argv) > 1 and sys.argv[1] == 'runserver')
ENABLE_DJANGO_ADMIN = os.getenv('ENABLE_DJANGO_ADMIN', False) == '1'

SITE_DOMAIN = os.getenv('DOMAIN_NAME', 'localhost')

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'backend',
    'frontend',
    SITE_DOMAIN,
]

CORS_ALLOWED_ORIGINS = [
    'http://backend:8000',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://127.0.0.1:3000',
    'http://localhost:3000',
    'http://frontend:3000',
    'http://frontend',
    'http://localhost',
    'http://{}'.format(SITE_DOMAIN),
    'http://api.{}'.format(SITE_DOMAIN),
    'http://app.{}'.format(SITE_DOMAIN),
    'http://www.{}'.format(SITE_DOMAIN),
]

CORS_ALLOW_CREDENTIALS = True  # allow cookies in Lax mode managed in session cookie same site

ROOT_URLCONF = 'promptsmith.urls'

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_COOKIE_DOMAIN = SITE_DOMAIN
SESSION_COOKIE_SAMESITE = 'Strict'  # default
SESSION_COOKIE_AGE = SHARED_CONFIGURATION.get('session_age', 60 * 60 * 24 * 7)  # 7 days by default

CSRF_USE_SESSIONS = False  # not use session but use cookies for csrf, to simplify the frontend authentication
CSRF_COOKIE_HTTPONLY = False  # see why here, https://docs.djangoproject.com/en/5.1/ref/settings/#csrf-cookie-httponly
CSRF_COOKIE_SECURE = True
CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS
CSRF_COOKIE_DOMAIN = '.{}'.format(SITE_DOMAIN) if SITE_DOMAIN != 'localhost' else 'localhost'  # allow from subdomain with .
CSRF_COOKIE_SAMESITE = 'Strict'  # default
CSRF_COOKIE_AGE = 60 * 60 * 24 * 30  # 365 days default from django, we use 30 days here

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    'core.apps.CoreConfig',
    'project.apps.ProjectConfig',
    'user_organization.apps.UserOrganisationConfig',
    "core_sdk.apps.CoreSdkConfig",

    # mailer
    "mailer",

    # Required
    'allauth',
    'allauth.account',
    'allauth.headless',

    # Optional
    # 'allauth.socialaccount',
    # 'allauth.mfa',
    # 'allauth.usersessions',

    'simple_history',
]

ACCOUNT_ADAPTER = 'allauth.account.adapter.DefaultAccountAdapter'
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    "allauth.account.middleware.AccountMiddleware",
    'simple_history.middleware.HistoryRequestMiddleware',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'promptsmith.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
        'NAME': os.getenv('POSTGRES_DB', 'postgres'),
        'USER': os.getenv('POSTGRES_USER', 'postgres'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', ''),
    }
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": '{}/promptsmith'.format(os.getenv('REDIS_URL', 'redis://localhost:6379')),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

## Allauth settings
# https://docs.allauth.org/en/latest/account/configuration.html
# https://docs.allauth.org/en/latest/headless/configuration.html
# These are the URLs to be implemented by your single-page application.
HEADLESS_FRONTEND_URLS = {
    # "account_confirm_email": "https://app.project.org/account/verify-email/{key}",
    # "account_reset_password_from_key": "https://app.org/account/password/reset/key/{key}",
    # "account_signup": "https://app.org/account/signup",
    "account_confirm_email": "/account/verify-email/{key}",
    "account_reset_password": "/account/password/reset",
    "account_reset_password_from_key": "/account/password/reset/key/{key}",
    "account_signup": "/account/signup",
    "socialaccount_login_error": "/account/provider/callback",
}

ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = True  # require by the config above
ACCOUNT_EMAIL_CONFIRMATION_HMAC = True  # default
HEADLESS_ONLY = True
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'
ACCOUNT_EMAIL_UNKNOWN_ACCOUNTS = False  # do not send email if account does not exist when reset password
# USERSESSIONS_ENABLED = True


SOCIALACCOUNT_PROVIDERS = {

}

## END Allauth settings


## START Email settings
MAILER_EMAIL_MAX_RETRIES = 1
MAILER_EMAIL_MAX_BATCH = 1  # this will be honoured however, but not efficient on runmailer_pg
MAILER_EMAIL_LOG_MESSAGE_DATA = False  # don't log the email content, we can see in resend anyway
MAILER_EMPTY_QUEUE_SLEEP = 60  # check to send email every 60 seconds
MAILER_EMAIL_THROTTLE = 1  # wait 1 second between sending each email

# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend" # django default smtp email backend, send in sync
EMAIL_BACKEND = "mailer.backend.DbBackend"  # mailer, run in async

SERVER_EMAIL = os.getenv('SERVER_EMAIL', '')
EMAIL_HOST = os.getenv('EMAIL_HOST', '')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
EMAIL_PORT = os.getenv('EMAIL_PORT', 587)
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', True) != 'False'

## END Email settings


# setting in local development and debug mode
if DEBUG or RUNNING_DEVELOPMENT_SERVER:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }

    SESSION_ENGINE = "django.contrib.sessions.backends.file"  # use file session for development, we cannot use cache, because it will be deleted immediately

    SESSION_COOKIE_SECURE = False  # not using https
    CSRF_COOKIE_SECURE = False  # not using https
    CSRF_COOKIE_DOMAIN = 'localhost'

    # CSRF_COOKIE_SAMESITE = 'None'
    # SESSION_COOKIE_SAMESITE = 'None'

    ACCOUNT_EMAIL_VERIFICATION = 'optional'

    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

    CORS_ALLOW_ALL_ORIGINS = True

    ALLOWED_HOSTS = ['*']
